### README

#### Application Server vs Web Server

**Application Server vs Web Server:**
- Web Server: A web server handles HTTP requests from clients (such as web browsers) and serves static content (like HTML, CSS, and JavaScript files). It may also act as a reverse proxy, forwarding requests to an application server. Examples include Nginx and Apache HTTP Server.
- Application Server: An application server hosts and runs the application logic, processes dynamic content, and interacts with the database. It generates responses to client requests, often by executing server-side code. Examples include Node.js, Tomcat, and JBoss.

#### Infrastructure Design:

**Objective:**
Design a web infrastructure using a load balancer, with separate servers for web, application, and database components. The load balancer should be configured in a cluster setup for redundancy and high availability.

**Requirements:**
1. Load Balancer (HAProxy):
   - Role: Distributes incoming traffic across multiple servers to ensure load distribution and high availability.
   - Why Added: To manage traffic efficiently and provide fault tolerance. Configured in a cluster with another load balancer for redundancy.

2. Web Server:
   - Role: Handles HTTP/HTTPS requests, serves static content, and forwards dynamic requests to the application server.
   - Why Added: To manage client requests and deliver web content. Separating this function helps in optimizing and scaling web traffic handling.

3. Application Server:
   - Role: Processes application logic, handles dynamic content, and communicates with the database.
   - Why Added: To execute server-side code and manage business logic separately from the web server. This separation improves scalability and maintainability.

4. Database Server:
   - Role: Stores and manages application data.
   - Why Added: To provide a dedicated environment for data management and ensure data persistence. Separating the database server helps in optimizing database performance and scaling.

**Explanation of Additional Elements:**

1. Load Balancer Cluster:
   - Why Added: A load balancer cluster ensures high availability and fault tolerance. If one load balancer fails, the other can continue to distribute traffic, preventing downtime.
   - Configuration: Typically, load balancer clustering involves configuring multiple HAProxy instances to work together, often using a shared virtual IP (VIP) for failover.

2. Separate Servers for Components:
   - Why Added: Isolating components (web server, application server, database) on separate servers helps in optimizing performance and scaling each component independently. It also enhances security by reducing the risk of a single point of failure affecting multiple components.

#### Summary:
The infrastructure design includes a load balancer configured in a cluster for redundancy, separate servers for web, application, and database components, and is focused on improving performance, scalability, and fault tolerance. Each component plays a specific role, and their separation ensures efficient management and operation of the web application.
